" Configuration file for vim
set modelines=0		" CVE-2007-2438

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements

set guifont=courier_new:h16

set title
set ruler
set nocompatible	" Use Vim defaults instead of 100% vi compatibility
set backspace=2		" more powerful backspacing
set showmatch		" 括号高亮显示
set number
set cindent		" C风格对齐
set autoindent
set confirm
set tabstop=4
syntax on
colorscheme molokai
"colorscheme desert
"colorscheme sonofobsidian
"set t_Co=256

set softtabstop=4
set shiftwidth=4

set hlsearch
set incsearch

set gdefault

set langmenu=zn_CN.UTF-8
set autoread

set whichwrap=b,s,<,>,[,]
set completeopt=preview,menu
set clipboard+=unnamed

set mouse=a		"可以在buffer的任何地方使用鼠标
set selection=exclusive
set selectmode=mouse,key

set helplang=cn

" YouCompleteMe
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_enable_diagnostic_highlighting=0
let g:ycm_error_symbol='>'
"let g:ycm_enable_diagnostic_signs=0

"NERDTree.vim
let g:NERDTreeWinPos="left"
let g:NERDTreeWinSize=30
let g:NERDTreeShowHidden=1
" 显示目录树行号
let g:NERDTreeShowLineNumbers=1
"使用winmaneger时，不用快捷键
" nmap <F2> :NERDTreeToggle<CR>

"tagbar.vim
"使用winmanager时，不用快捷键
"nmap <silent> <F5> :TagbarToggle<CR>
let g:tagbar_Auto_Open=0
let g:tagbar_ctags_bin='/usr/local/bin/ctags'
let g:tagbar_width=28
"autocmd VimEnter * nested :call tagbar#autoopen(1)
let g:tagbar_right=1
let g:tagbar_sort = 0


"taglist.vim, 暂时未使用该插件,(现在用NERDTree)
"let Tlist_Ctags_Cmd='/usr/local/bin/ctags'
" 仅显示当前文件的tag
"let Tlist_Show_One_File=1
" 如果tag是最后一个窗口则退出
"let Tlist_Exit_OnlyWindow=1
"let Tlist_Use_Right_Window=1
"let Tlist_Auto_Open=0   " 使用winmanager时关闭自动开启
" 绑定F8到taglist,使用winmanager时不用快捷键
" noremap <F8> :TlistToggle<CR> 

" omnitags.vim
"nmap <silent> <F3> :OmniTagsLoad tags<CR>


"winmanager配置,管理NERDTree和tagbar，也可以改为taglist
let g:NERDTree_title="[NERDTree]"
let g:winManagerWindowLayout='NERDTree|Tagbar'
function! NERDTree_Start()
" 关闭自动出现的窗口
	exec 'q' 
    exec 'NERDTree'
endfunction
function! NERDTree_IsValid()
    return 1
endfunction

let g:Tagbar_title="[Tagbar]"
function! Tagbar_Start()
	exec 'q'
	exec 'TagbarOpen'
endfunction
function! Tagbar_IsValid()
	return 1
endfunction
" 绑定F2到winmanager
nmap <silent> <F2> :WMToggle<CR>

"minibufexp
let g:miniBufExplMapWindowNavVim = 1
" 是用C-箭头键切换到上下左右窗口中去
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplMapCTabSwitchBufs = 1 
let g:miniBufExplModSelTarget = 1
"解决窗口变小问题
let g:bufExplorerMaxHeight=30
let g:miniBufExplorerMoreThanOne=0

"bufexplorer.vim
let g:bufExplorerSortBy='mru'        " Sort by most recently used.
let g:bufExplorerSplitRight=0        " Split left.
let g:bufExplorerSplitVertical=1     " Split vertically.
let g:bufExplorerSplitVertSize = 30  " Split width
let g:bufExplorerUseCurrentWindow=1  " Open in new window.

filetype off

"vundle.vim 
set rtp+=~/.vim/bundle/vundle/
call vundle#begin()
Plugin 'gmarik/vundle'
Bundle 'Valloric/YouCompleteMe'

call vundle#end()

"pathogen.vim
call pathogen#infect()
filetype plugin indent on
"filetype on
" 当新建 .h .c .hpp .cpp .mk .sh等文件时自动调用SetTitle 函数
autocmd BufNewFile *.cpp,*.c,*.cc exec ":call SetComment()"|normal 10Go 
" 加入注释 
func SetComment()
    if expand("%:e") == 'c'
        call setline(1, "//c file")
    elseif expand("%:e") == 'cc'
        call setline(1, '//c++ file')
    elseif expand("%:e") == 'cpp'
        call setline(1, '//C++ file')
	endif
	call append(1, "/***********************************************************************") 
	call append(2, " #   Copyright (C) ".strftime("%Y")." ict ac ltd. All rights reserved.")
	call append(3, " # ") 
	call append(4, " #        FileName：".expand("%"))
	call append(5, " #          Author：wuwenqing@ict.ac.cn")
	call append(6, " #          Create：".strftime("%Y-%m-%d %H:%M:%S"))
	call append(7, " #   Last Modified：".strftime("%Y-%m-%d %H:%M:%S"))
	call append(8, " # ") 
	call append(9, " #**********************************************************************/") 
	call append(10, "")
	call append(11, "")
endfunc

func DataInsert()
    call cursor(9,1)
    if search ('Last Modified') != 0
        let line = line('.')
        call setline(line, ' #  Last Modified: '.strftime("%Y-%m-%d %H:%M:%S"))
    endif
endfunc
autocmd FileWritePre,BufWritePre *.c,*.cc,*.cpp ks|call DataInsert() |'s


" Don't write backup file if vim is being called by "crontab -e"
au BufWrite /private/tmp/crontab.* set nowritebackup nobackup
" Don't write backup file if vim is being called by "chpass"
au BufWrite /private/etc/pw.* set nowritebackup nobackup
